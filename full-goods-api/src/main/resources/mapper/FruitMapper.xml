<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.api.mapper.FruitMapper">

    <resultMap id="BaseResultMap" type="org.example.common.entity.Fruit">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="description" property="description" />
        <result column="origin" property="origin" />
        <result column="price" property="price" />
        <result column="unit" property="unit" />
        <result column="stock" property="stock" />
        <result column="image_url" property="imageUrl" />
        <result column="category_id" property="categoryId" />
        <result column="taste" property="taste" />
        <result column="nutrition" property="nutrition" />
        <result column="suitable_crowd" property="suitableCrowd" />
        <result column="status" property="status" />
        <result column="recommended" property="recommended" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
        <result column="create_by" property="createBy" />
        <result column="update_by" property="updateBy" />
        <result column="remark" property="remark" />
    </resultMap>

    <sql id="Base_Column_List">
        id, name, description, origin, price, unit, stock, image_url, category_id, taste, nutrition,
        suitable_crowd, status, recommended, create_time, update_time, create_by, update_by, remark
    </sql>

    <select id="selectAll" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_fruit
        WHERE status = 1
        ORDER BY id ASC
    </select>

    <select id="selectAllWithPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_fruit
        ORDER BY id ASC
    </select>

    <select id="selectByConditions" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_fruit
        <where>
            status = 1
            <if test="search != null and search != ''">
                AND (
                    name LIKE CONCAT('%', #{search}, '%')
                    OR description LIKE CONCAT('%', #{search}, '%')
                    OR origin LIKE CONCAT('%', #{search}, '%')
                    OR category_id LIKE CONCAT('%', #{search}, '%')
                )
            </if>
            <if test="category != null and category != ''">
                AND category_id = #{category}
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
        ORDER BY id ASC
    </select>

    <select id="selectByConditionsWithPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_fruit
        <where>
            <if test="search != null and search != ''">
                (
                    name LIKE CONCAT('%', #{search}, '%')
                    OR description LIKE CONCAT('%', #{search}, '%')
                    OR origin LIKE CONCAT('%', #{search}, '%')
                    OR category_id LIKE CONCAT('%', #{search}, '%')
                )
            </if>
            <if test="category != null and category != ''">
                <if test="search != null and search != ''">AND</if>
                category_id = #{category}
            </if>
            <if test="status != null">
                <if test="(search != null and search != '') or (category != null and category != '')">AND</if>
                status = #{status}
            </if>
        </where>
        ORDER BY id ASC
    </select>

    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_fruit
        WHERE id = #{id}
    </select>

    <select id="selectByCategory" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_fruit f
        LEFT JOIN t_fruit_category fc ON f.category_id = fc.id
        WHERE f.status = 1
        AND (fc.name = #{category} OR fc.id = #{category})
        ORDER BY f.id ASC
    </select>

    <select id="selectByKeyword" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_fruit
        <where>
            status = 1
            <if test="field != null and field != '' and keyword != null and keyword != ''">
                AND ${field} LIKE CONCAT('%', #{keyword}, '%')
            </if>
        </where>
        ORDER BY id ASC
    </select>
    
    <select id="selectByGeneralKeyword" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_fruit
        WHERE status = 1
        AND (
            name LIKE CONCAT('%', #{keyword}, '%')
            OR description LIKE CONCAT('%', #{keyword}, '%')
            OR origin LIKE CONCAT('%', #{keyword}, '%')
            OR category_id LIKE CONCAT('%', #{keyword}, '%')
            OR taste LIKE CONCAT('%', #{keyword}, '%')
            OR nutrition LIKE CONCAT('%', #{keyword}, '%')
            OR suitable_crowd LIKE CONCAT('%', #{keyword}, '%')
        )
        ORDER BY id ASC
    </select>
    
    <select id="selectByKeywords" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        ,
        (
            <foreach collection="keywords" item="keyword" separator=" + ">
                (
                    CASE WHEN name LIKE CONCAT('%', #{keyword}, '%') THEN 10 ELSE 0 END +
                    CASE WHEN taste LIKE CONCAT('%', #{keyword}, '%') THEN 8 ELSE 0 END +
                    CASE WHEN suitable_crowd LIKE CONCAT('%', #{keyword}, '%') THEN 6 ELSE 0 END +
                    CASE WHEN nutrition LIKE CONCAT('%', #{keyword}, '%') THEN 5 ELSE 0 END +
                    CASE WHEN description LIKE CONCAT('%', #{keyword}, '%') THEN 3 ELSE 0 END +
                    CASE WHEN origin LIKE CONCAT('%', #{keyword}, '%') THEN 2 ELSE 0 END +
                    CASE WHEN category_id LIKE CONCAT('%', #{keyword}, '%') THEN 1 ELSE 0 END
                )
            </foreach>
        ) AS match_score
        FROM t_fruit
        <where>
            status = 1
            <foreach collection="keywords" item="keyword" open="AND (" separator=" OR " close=")">
                name LIKE CONCAT('%', #{keyword}, '%')
                OR description LIKE CONCAT('%', #{keyword}, '%')
                OR origin LIKE CONCAT('%', #{keyword}, '%')
                OR category_id LIKE CONCAT('%', #{keyword}, '%')
                OR taste LIKE CONCAT('%', #{keyword}, '%')
                OR nutrition LIKE CONCAT('%', #{keyword}, '%')
                OR suitable_crowd LIKE CONCAT('%', #{keyword}, '%')
            </foreach>
        </where>
        ORDER BY match_score DESC, recommended DESC, id ASC
    </select>

    <insert id="insert" parameterType="org.example.common.entity.Fruit" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_fruit
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="name != null">name,</if>
            <if test="description != null">description,</if>
            <if test="origin != null">origin,</if>
            <if test="price != null">price,</if>
            <if test="unit != null">unit,</if>
            <if test="stock != null">stock,</if>
            <if test="imageUrl != null">image_url,</if>
            <if test="categoryId != null">category_id,</if>
            <if test="taste != null">taste,</if>
            <if test="nutrition != null">nutrition,</if>
            <if test="suitableCrowd != null">suitable_crowd,</if>
            <if test="status != null">status,</if>
            <if test="recommended != null">recommended,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="createBy != null">create_by,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="remark != null">remark,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="name != null">#{name},</if>
            <if test="description != null">#{description},</if>
            <if test="origin != null">#{origin},</if>
            <if test="price != null">#{price},</if>
            <if test="unit != null">#{unit},</if>
            <if test="stock != null">#{stock},</if>
            <if test="imageUrl != null">#{imageUrl},</if>
            <if test="categoryId != null">#{categoryId},</if>
            <if test="taste != null">#{taste},</if>
            <if test="nutrition != null">#{nutrition},</if>
            <if test="suitableCrowd != null">#{suitableCrowd},</if>
            <if test="status != null">#{status},</if>
            <if test="recommended != null">#{recommended},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="remark != null">#{remark},</if>
        </trim>
    </insert>

    <update id="update" parameterType="org.example.common.entity.Fruit">
        UPDATE t_fruit
        <set>
            <if test="name != null">name = #{name},</if>
            <if test="description != null">description = #{description},</if>
            <if test="origin != null">origin = #{origin},</if>
            <if test="price != null">price = #{price},</if>
            <if test="unit != null">unit = #{unit},</if>
            <if test="stock != null">stock = #{stock},</if>
            <if test="imageUrl != null">image_url = #{imageUrl},</if>
            <if test="categoryId != null">category_id = #{categoryId},</if>
            <if test="taste != null">taste = #{taste},</if>
            <if test="nutrition != null">nutrition = #{nutrition},</if>
            <if test="suitableCrowd != null">suitable_crowd = #{suitableCrowd},</if>
            <if test="status != null">status = #{status},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="remark != null">remark = #{remark},</if>
        </set>
        WHERE id = #{id}
    </update>
    
    <update id="updateImageUrl">
        UPDATE t_fruit 
        SET image_url = #{imageUrl}
        WHERE id = #{id}
    </update>

    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM t_fruit WHERE id = #{id}
    </delete>

    <!-- 扣减库存 -->
    <update id="decreaseStock">
        UPDATE t_fruit 
        SET stock = stock - #{quantity}, update_time = NOW()
        WHERE id = #{id} AND stock >= #{quantity}
    </update>

    <!-- 增加库存 -->
    <update id="increaseStock">
        UPDATE t_fruit 
        SET stock = stock + #{quantity}, update_time = NOW()
        WHERE id = #{id}
    </update>
    
    <select id="selectCategories" resultType="java.lang.String">
        SELECT DISTINCT category
        FROM t_fruit
        WHERE status = 1
        AND category IS NOT NULL
        ORDER BY category ASC
    </select>
    
    <select id="selectByCategoryId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        f.id, f.name, f.description, f.origin, f.price, f.unit, f.stock, f.image_url, f.category_id, f.taste, f.nutrition,
        f.suitable_crowd, f.status, f.create_time, f.update_time, f.create_by, f.update_by, f.remark
        FROM t_fruit f
        INNER JOIN t_fruit_category fc ON f.category_id = fc.id
        WHERE fc.id = #{categoryId}
        AND f.status = 1
        ORDER BY f.id ASC
    </select>
    
    <!-- ==================== Admin统计相关SQL映射 ==================== -->
    
    <select id="countTotal" resultType="java.lang.Long">
        SELECT COUNT(*) FROM t_fruit
    </select>
    
    <select id="countByStatus" resultType="java.lang.Long">
        SELECT COUNT(*) FROM t_fruit WHERE status = #{status}
    </select>
    
    <select id="countLowStock" resultType="java.lang.Long">
        SELECT COUNT(*) FROM t_fruit WHERE stock <![CDATA[<=]]> #{threshold}
    </select>
    
    <select id="countTodayAdded" resultType="java.lang.Long">
        SELECT COUNT(*) FROM t_fruit 
        WHERE DATE(create_time) = CURDATE()
    </select>
    
    <select id="selectNewFruits" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_fruit
        WHERE status = 1
        ORDER BY create_time DESC
        LIMIT #{limit}
    </select>

    <select id="selectRecommended" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_fruit
        WHERE status = 1
        AND recommended = 1
        ORDER BY create_time DESC
        LIMIT #{limit}
    </select>
    
    <!-- ==================== 推荐相关SQL映射 ==================== -->
    
    <update id="updateRecommended">
        UPDATE t_fruit SET recommended = #{recommended}, update_time = NOW()
        WHERE id = #{id}
    </update>
    
    <update id="batchUpdateRecommended">
        UPDATE t_fruit SET recommended = #{recommended}, update_time = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
    
    <!-- ==================== 限时特惠相关SQL映射 ==================== -->
    
    <insert id="insertFlashSale" useGeneratedKeys="true" keyProperty="flashSale.id">
        INSERT INTO t_flash_sale
        (fruit_id, original_price, sale_price, discount_rate, start_time, end_time, stock, sold_count, status, create_time)
        VALUES
        (#{fruitId}, #{flashSale.originalPrice}, #{flashSale.salePrice}, #{flashSale.discountRate}, 
         #{flashSale.startTime}, #{flashSale.endTime}, #{flashSale.stock}, #{flashSale.soldCount}, 
         #{flashSale.status}, NOW())
    </insert>
    
    <update id="updateFlashSale" parameterType="org.example.common.entity.FlashSale">
        UPDATE t_flash_sale 
        SET original_price = #{flashSale.originalPrice},
            sale_price = #{flashSale.salePrice},
            discount_rate = #{flashSale.discountRate},
            start_time = #{flashSale.startTime},
            end_time = #{flashSale.endTime},
            stock = #{flashSale.stock},
            status = #{flashSale.status},
            update_time = NOW()
        WHERE fruit_id = #{fruitId}
    </update>
    
    <delete id="deleteFlashSaleByFruitId">
        DELETE FROM t_flash_sale WHERE fruit_id = #{fruitId}
    </delete>
    
    <!-- 查询商品列表（包含限时特惠信息） -->
    <select id="selectWithFlashSaleInfo" resultType="org.example.api.vo.FruitVO">
        SELECT 
            f.id, f.name, f.description, f.origin, f.price, f.unit, f.stock, f.image_url, 
            f.category_id, fc.name as category, f.taste, f.nutrition, f.suitable_crowd, f.status, f.recommended, 
            f.create_time, f.update_time, f.create_by, f.update_by, f.remark,
            CASE WHEN fs.id IS NOT NULL THEN 1 ELSE 0 END as flash_sale_active,
            fs.sale_price as flash_sale_price,
            fs.original_price as flash_sale_original_price,
            fs.start_time as flash_sale_start_time,
            fs.end_time as flash_sale_end_time,
            fs.stock as flash_sale_stock,
            fs.sold_count as flash_sale_sold_count
        FROM t_fruit f
        LEFT JOIN t_fruit_category fc ON f.category_id = fc.id
        LEFT JOIN (
            SELECT 
                fs1.fruit_id, fs1.sale_price, fs1.original_price, fs1.start_time, fs1.end_time, 
                fs1.stock, fs1.sold_count, fs1.id, fs1.status
            FROM t_flash_sale fs1
            INNER JOIN (
                SELECT fruit_id, MAX(create_time) as max_create_time
                FROM t_flash_sale 
                WHERE status = 1 
                AND start_time <![CDATA[<=]]> NOW() 
                AND end_time <![CDATA[>=]]> NOW()
                GROUP BY fruit_id
            ) fs2 ON fs1.fruit_id = fs2.fruit_id AND fs1.create_time = fs2.max_create_time
            WHERE fs1.status = 1 
            AND fs1.start_time <![CDATA[<=]]> NOW() 
            AND fs1.end_time <![CDATA[>=]]> NOW()
        ) fs ON f.id = fs.fruit_id
        <where>
            <if test="search != null and search != ''">
                AND (
                    f.name LIKE CONCAT('%', #{search}, '%')
                    OR f.description LIKE CONCAT('%', #{search}, '%')
                    OR f.origin LIKE CONCAT('%', #{search}, '%')
                )
            </if>
            <if test="category != null and category != ''">
                AND fc.id = #{category}
            </if>
            <if test="status != null">
                AND f.status = #{status}
            </if>
        </where>
        ORDER BY f.create_time DESC
    </select>
    
    <!-- 统计各分类的水果数量 -->
    <select id="selectCategoryCounts" resultType="org.example.api.mapper.FruitMapper$CategoryCount">
        SELECT 
            fc.name as category,
            COUNT(f.id) as count
        FROM t_fruit_category fc
        LEFT JOIN t_fruit f ON fc.id = f.category_id AND f.status = 1
        GROUP BY fc.id, fc.name
    </select>
    
</mapper>