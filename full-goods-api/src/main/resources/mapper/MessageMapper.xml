<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.api.mapper.MessageMapper">

    <resultMap id="BaseResultMap" type="org.example.common.entity.Message">
        <id column="id" property="id" />
        <result column="user_id" property="userId" />
        <result column="message_type" property="messageType" />
        <result column="title" property="title" />
        <result column="content" property="content" />
        <result column="status" property="status" />
        <result column="order_no" property="orderNo" />
        <result column="icon_url" property="iconUrl" />
        <result column="link_url" property="linkUrl" />
        <result column="sender_id" property="senderId" />
        <result column="sender_type" property="senderType" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
        <result column="create_by" property="createBy" />
        <result column="update_by" property="updateBy" />
        <result column="remark" property="remark" />
    </resultMap>

    <sql id="Base_Column_List">
        id, user_id, message_type, title, content, status, order_no, icon_url, link_url,
        sender_id, sender_type, create_time, update_time, create_by, update_by, remark
    </sql>

    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_message
        WHERE id = #{id}
    </select>

    <select id="selectByUserId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_message
        WHERE user_id = #{userId}
        ORDER BY status ASC, create_time DESC
    </select>

    <select id="selectByUserIdAndType" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_message
        WHERE user_id = #{userId} AND message_type = #{messageType}
        ORDER BY id ASC
    </select>

    <select id="selectUnreadByUserId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_message
        WHERE user_id = #{userId} AND status = 0
        ORDER BY create_time DESC
    </select>

    <select id="countUnreadByUserIdAndType" resultType="int">
        SELECT COUNT(*)
        FROM t_message
        WHERE user_id = #{userId} AND message_type = #{messageType} AND status = 0
    </select>

    <select id="countUnreadByUserId" parameterType="java.lang.Long" resultType="int">
        SELECT COUNT(*)
        FROM t_message
        WHERE user_id = #{userId} AND status = 0
    </select>

    <select id="selectByOrderNo" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_message
        WHERE order_no = #{orderNo}
        ORDER BY create_time DESC
    </select>

    <select id="selectByUserIdWithPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_message
        WHERE user_id = #{userId}
        ORDER BY status ASC, create_time DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="selectByUserIdAndTypeWithPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_message
        WHERE user_id = #{userId} AND message_type = #{messageType}
        ORDER BY status ASC, create_time ASC
        LIMIT #{offset}, #{limit}
    </select>

    <insert id="insert" parameterType="org.example.common.entity.Message" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO t_message
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id,</if>
            <if test="messageType != null">message_type,</if>
            <if test="title != null">title,</if>
            <if test="content != null">content,</if>
            <if test="status != null">status,</if>
            <if test="orderNo != null">order_no,</if>
            <if test="iconUrl != null">icon_url,</if>
            <if test="linkUrl != null">link_url,</if>
            <if test="senderId != null">sender_id,</if>
            <if test="senderType != null">sender_type,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="createBy != null">create_by,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="remark != null">remark,</if>
        </trim>
        <trim prefix="VALUES (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId},</if>
            <if test="messageType != null">#{messageType},</if>
            <if test="title != null">#{title},</if>
            <if test="content != null">#{content},</if>
            <if test="status != null">#{status},</if>
            <if test="orderNo != null">#{orderNo},</if>
            <if test="iconUrl != null">#{iconUrl},</if>
            <if test="linkUrl != null">#{linkUrl},</if>
            <if test="senderId != null">#{senderId},</if>
            <if test="senderType != null">#{senderType},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="remark != null">#{remark},</if>
        </trim>
    </insert>

    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO t_message (user_id, message_type, title, content, status, order_no, icon_url, link_url, sender_id, sender_type, create_time, update_time, create_by, update_by, remark)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.userId}, #{item.messageType}, #{item.title}, #{item.content}, #{item.status}, #{item.orderNo}, #{item.iconUrl}, #{item.linkUrl}, #{item.senderId}, #{item.senderType}, #{item.createTime}, #{item.updateTime}, #{item.createBy}, #{item.updateBy}, #{item.remark})
        </foreach>
    </insert>

    <update id="update" parameterType="org.example.common.entity.Message">
        UPDATE t_message
        <set>
            <if test="userId != null">user_id = #{userId},</if>
            <if test="messageType != null">message_type = #{messageType},</if>
            <if test="title != null">title = #{title},</if>
            <if test="content != null">content = #{content},</if>
            <if test="status != null">status = #{status},</if>
            <if test="orderNo != null">order_no = #{orderNo},</if>
            <if test="iconUrl != null">icon_url = #{iconUrl},</if>
            <if test="linkUrl != null">link_url = #{linkUrl},</if>
            <if test="senderId != null">sender_id = #{senderId},</if>
            <if test="senderType != null">sender_type = #{senderType},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="remark != null">remark = #{remark},</if>
        </set>
        WHERE id = #{id}
    </update>

    <update id="markAsRead" parameterType="java.lang.Long">
        UPDATE t_message
        SET status = 1, update_time = NOW()
        WHERE id = #{id}
    </update>

    <update id="batchMarkAsRead" parameterType="java.util.List">
        UPDATE t_message
        SET status = 1, update_time = NOW()
        WHERE id IN
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <update id="markAllAsReadByUserId" parameterType="java.lang.Long">
        UPDATE t_message
        SET status = 1, update_time = NOW()
        WHERE user_id = #{userId} AND status = 0
    </update>

    <update id="markAsReadByUserIdAndType">
        UPDATE t_message
        SET status = 1, update_time = NOW()
        WHERE user_id = #{userId} AND message_type = #{messageType} AND status = 0
    </update>

    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM t_message WHERE id = #{id}
    </delete>

    <delete id="batchDelete" parameterType="java.util.List">
        DELETE FROM t_message
        WHERE id IN
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <delete id="deleteByUserId" parameterType="java.lang.Long">
        DELETE FROM t_message WHERE user_id = #{userId}
    </delete>

    <!-- ==================== 管理员相关查询方法 ==================== -->

    <select id="selectAllWithFilters" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM t_message
        <where>
            <if test="messageType != null">
                AND message_type = #{messageType}
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
            <if test="userId != null">
                AND user_id = #{userId}
            </if>
        </where>
        ORDER BY create_time DESC
    </select>

    <select id="countAll" resultType="int">
        SELECT COUNT(*) FROM t_message
    </select>

    <select id="countByStatus" resultType="int">
        SELECT COUNT(*) FROM t_message WHERE status = #{status}
    </select>

    <select id="countByType" resultType="int">
        SELECT COUNT(*) FROM t_message WHERE message_type = #{messageType}
    </select>

    <select id="countTodayMessages" resultType="int">
        SELECT COUNT(*) FROM t_message 
        WHERE DATE(create_time) = CURDATE()
    </select>

    <!-- 获取用户聊天列表（按用户分组） -->
    <select id="selectUserChatList" resultType="map">
        SELECT 
            u.id as userId,
            u.username,
            u.nickname,
            u.avatar,
            COUNT(m.id) as messageCount,
            SUM(CASE WHEN m.status = 0 THEN 1 ELSE 0 END) as unreadCount,
            MAX(m.create_time) as lastMessageTime,
            (
                SELECT content 
                FROM t_message m2 
                WHERE m2.user_id = u.id 
                ORDER BY m2.create_time DESC 
                LIMIT 1
            ) as lastMessageContent
        FROM t_user u
        LEFT JOIN t_message m ON u.id = m.user_id
        <where>
            <if test="keyword != null and keyword != ''">
                AND (u.username LIKE CONCAT('%', #{keyword}, '%') 
                     OR u.nickname LIKE CONCAT('%', #{keyword}, '%')
                     OR u.phone LIKE CONCAT('%', #{keyword}, '%'))
            </if>
        </where>
        GROUP BY u.id, u.username, u.nickname, u.avatar
        HAVING messageCount > 0
        ORDER BY lastMessageTime DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 获取用户聊天列表总数 -->
    <select id="countUserChatList" resultType="int">
        SELECT COUNT(*) FROM (
            SELECT u.id
            FROM t_user u
            LEFT JOIN t_message m ON u.id = m.user_id
            <where>
                <if test="keyword != null and keyword != ''">
                    AND (u.username LIKE CONCAT('%', #{keyword}, '%') 
                         OR u.nickname LIKE CONCAT('%', #{keyword}, '%')
                         OR u.phone LIKE CONCAT('%', #{keyword}, '%'))
                </if>
            </where>
            GROUP BY u.id
            HAVING COUNT(m.id) > 0
        ) as chat_users
    </select>

    <!-- 获取与特定用户的聊天记录 -->
    <select id="selectChatMessagesByUserId" resultMap="BaseResultMap">
        SELECT 
            <include refid="Base_Column_List" />
        FROM t_message
        WHERE user_id = #{userId}
        ORDER BY create_time ASC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 获取与特定用户的聊天记录总数 -->
    <select id="countChatMessagesByUserId" resultType="int">
        SELECT COUNT(*)
        FROM t_message
        WHERE user_id = #{userId}
    </select>
    
    <!-- 根据用户ID和标题统计未读客服消息数量 -->
    <select id="countUnreadByUserIdAndTitle" resultType="int">
        SELECT COUNT(*)
        FROM t_message
        WHERE user_id = #{userId} AND title = #{title} AND status = 0
    </select>

</mapper>