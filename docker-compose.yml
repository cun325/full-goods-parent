version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: shopapp-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 12345678
      MYSQL_DATABASE: goods_shop
      MYSQL_USER: shopapp
      MYSQL_PASSWORD: shopapp123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --innodb-log-file-size=64M
      --max-connections=200
      --query-cache-size=32M
    networks:
      - shopapp-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: shopapp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - shopapp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 图片服务
  image-service:
    build:
      context: .
      target: image-service
    container_name: shopapp-image-service
    restart: unless-stopped
    ports:
      - "8083:8083"
    volumes:
      - image_uploads:/app/uploads
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_OPTS=-Xms256m -Xmx512m
    networks:
      - shopapp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API服务
  api-service:
    build:
      context: .
      target: api-service
    container_name: shopapp-api
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/goods_shop?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai
      - SPRING_REDIS_HOST=redis
      - JAVA_OPTS=-Xms512m -Xmx1024m
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      image-service:
        condition: service_healthy
    networks:
      - shopapp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # 管理后台服务
  admin-service:
    build:
      context: .
      target: admin-service
    container_name: shopapp-admin
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/goods_shop?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai
      - SPRING_REDIS_HOST=redis
      - JAVA_OPTS=-Xms512m -Xmx1024m
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      image-service:
        condition: service_healthy
    networks:
      - shopapp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/admin/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: shopapp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - image_uploads:/var/www/uploads
    depends_on:
      - admin-service
      - api-service
      - image-service
    networks:
      - shopapp-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: shopapp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - shopapp-network

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: shopapp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - shopapp-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  image_uploads:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  shopapp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16